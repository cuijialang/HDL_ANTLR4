<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Schematix.Waveform.UserControls">

    <!--Converter for Indentation of items-->
    <local:TreeListViewConverter x:Key="TreeListViewConverter"/>

    <!--Control Template for TreeViewItem's.-->
    <ControlTemplate TargetType="TreeViewItem" x:Key="TreeListViewItem">
        <!--Grid containing the current information and the subnodes.-->
        <Border x:Name="Border" BorderThickness="1" BorderBrush="#6FBDE8" CornerRadius="4" Background="Transparent">
            <StackPanel>
            <!--Border wrapping the content presenter.-->
            <!--GridViewRowPrsenter containing the current information.-->
                <GridViewRowPresenter Content="{TemplateBinding Header}"
                    Columns="{Binding Columns, 
                    RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:TreeListView}}"/>
            <!--ItemsPresenter containing the subnodes-->
                <ItemsPresenter x:Name="ItemsPresenter" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0"/>
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <!--Trigger used to show the sub items-->
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ItemsPresenter" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <Trigger Property="IsSelected" Value="true">
                <!--Change the background color-->
                <Setter TargetName="Border" Property="Background"
                    Value="LightBlue"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="Black"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <!--Change the background color-->
                <Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiTrigger>
            <!--Trigger used to change the color based on the status of the item-->
            <Trigger Property="IsEnabled" Value="false">
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type ToggleButton}" x:Key="ExpanderToggleButton">
        <Border Width="19" Height="13" Background="Transparent">
            <Border Width="9" Height="9" BorderThickness="1" BorderBrush="#FF7898B5" CornerRadius="1" SnapsToDevicePixels="true">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0"
                                       EndPoint="1,1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Color="White" Offset=".2"/>
                            <GradientStop Color="#FFC0B7A6" Offset="1"/>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.Background>
                <Path x:Name="ExpandPath" Margin="1,1,1,1" Fill="Black" Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
            </Border>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Data" TargetName="ExpandPath"  Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Control Template for TreeListViewExpander's.-->
    <ControlTemplate TargetType="{x:Type local:TreeListViewExpander}" x:Key="TreeListViewExpander">
        <StackPanel Orientation="Horizontal" x:Name="ContainerElement">
            <!--Use a FrameworkElement to indent the button-->
            <FrameworkElement Width="{Binding RelativeSource={x:Static RelativeSource.Self}, 
                Converter={StaticResource TreeListViewConverter}}"/>
            <!--Use a standard toggle button-->
            <ToggleButton IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" VerticalAlignment="Center" Margin="1" Template="{StaticResource ResourceKey=ExpanderToggleButton}">
            </ToggleButton>
        </StackPanel>
        <ControlTemplate.Triggers>
            <!--Trigger used to show/hide the expand button-->
            <DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" Value="False">
                <Setter TargetName="ContainerElement" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Apply this style to all controls of type 'TreeListView'.-->
    <Style TargetType="{x:Type local:TreeListView}">
        <!--Set the control template.-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeListView}">
                    <ControlTemplate.Resources>
                        <!--Apply this style to all 'TreeViewItem's.-->
                        <Style TargetType="TreeViewItem">
                            <Setter Property="Template" Value="{StaticResource TreeListViewItem}"/>
                        </Style>
                        <!--Apply this style to all 'TreeListViewExpander's.-->
                        <Style TargetType="local:TreeListViewExpander">
                            <Setter Property="Template" Value="{StaticResource TreeListViewExpander}"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <!--Create a standard border around the 'TreeListView'.-->
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <!--ScrollViewer providing horizontal scrolling functionality 
                        for both, content and headers.-->
                        <!--Grid containing the header row and all the content rows.-->
                        <Grid>
                            <Grid.RowDefinitions>
                                <!--The header row.-->
                                <RowDefinition Height="Auto"/>
                                <!--The content row.-->
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <!--The header row.-->
                            <GridViewHeaderRowPresenter Columns="{TemplateBinding Columns}"
                                AllowsColumnReorder="{TemplateBinding AllowsColumnReorder}" Grid.Row="0"/>
                            <!--ScrollViewer providing vertical scrolling
                            functionality for the content.-->
                            <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                            VerticalScrollBarVisibility="Auto"
                                            Grid.Row="1">
                                <!--ItemsPresenter containg the content.-->
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
